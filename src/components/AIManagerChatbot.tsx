import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { MessageCircle, Send, X, Bot, User } from 'lucide-react';

interface Message {
  id: string;
  type: 'user' | 'bot';
  content: string;
  timestamp: Date;
}

const AIManagerChatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'bot',
      content: 'üëã –í—ñ—Ç–∞—é! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó —Ç–∞ –®–Ü-—Ä—ñ—à–µ–Ω—å! üöÄ –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –≤–∞—à –±—ñ–∑–Ω–µ—Å. –©–æ —Ü—ñ–∫–∞–≤–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ?',
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const getAIResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase();
    
    if (message.includes('—Ü—ñ–Ω–∞') || message.includes('–≤–∞—Ä—Ç—ñ—Å—Ç—å') || message.includes('–±—é–¥–∂–µ—Ç')) {
      return 'üí∞ –ù–∞—à—ñ –ø–∞–∫–µ—Ç–∏ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –≤—ñ–¥ $500/–º—ñ—Å—è—Ü—å. –¶–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó. –•–æ—á–µ—Ç–µ –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –≤–∞—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø—Ä–æ—î–∫—Ç?';
    }
    
    if (message.includes('crm') || message.includes('—Ü—Ä–º') || message.includes('–∫–ª—ñ—î–Ω—Ç')) {
      return 'üîó –ú–∏ —ñ–Ω—Ç–µ–≥—Ä—É—î–º–æ CRM –∑ —á–∞—Ç-–±–æ—Ç–∞–º–∏, email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–º —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é. ROI –∑–∞–∑–≤–∏—á–∞–π +200-400%. –Ø–∫–∏–π CRM –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ?';
    }
    
    if (message.includes('–±–æ—Ç') || message.includes('—á–∞—Ç')) {
      return 'ü§ñ –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—É–º–Ω—ñ —á–∞—Ç-–±–æ—Ç–∏ –¥–ª—è Telegram, WhatsApp, Instagram. –í–æ–Ω–∏ –º–æ–∂—É—Ç—å –ø—Ä–∏–π–º–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∫–æ–Ω—Å—É–ª—å—Ç—É–≤–∞—Ç–∏, –∑–±–∏—Ä–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∏. –î–ª—è —è–∫–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –±–æ—Ç?';
    }
    
    if (message.includes('ai') || message.includes('—à—ñ') || message.includes('—à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç')) {
      return 'üß† –í–ø—Ä–æ–≤–∞–¥–∂—É—î–º–æ AI –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –¥–∞–Ω–∏—Ö, –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó —Ä—ñ—à–µ–Ω—å. GPT –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É, –∫–æ–º–ø\'—é—Ç–µ—Ä–Ω–∏–π –∑—ñ—Ä –¥–ª—è —è–∫–æ—Å—Ç—ñ. –©–æ —Å–∞–º–µ —Ü—ñ–∫–∞–≤–∏—Ç—å?';
    }
    
    if (message.includes('–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü') || message.includes('–ø—Ä–æ—Ü–µ—Å')) {
      return '‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑—É—î–º–æ: –ø—Ä–æ–¥–∞–∂—ñ, HR, —Ñ—ñ–Ω–∞–Ω—Å–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, —Å–∫–ª–∞–¥—Å—å–∫—É –ª–æ–≥—ñ—Å—Ç–∏–∫—É. –Ø–∫–∏–π –≤—ñ–¥–¥—ñ–ª –Ω–∞–π–±—ñ–ª—å—à–µ –ø–æ—Ç—Ä–µ–±—É—î –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó?';
    }
    
    if (message.includes('–≤–µ–±') || message.includes('—Å–∞–π—Ç') || message.includes('—Ä–æ–∑—Ä–æ–±–∫–∞')) {
      return 'üíª –†–æ–∑—Ä–æ–±–ª—è—î–º–æ –≤–µ–±-–¥–æ–¥–∞—Ç–∫–∏ –∑ AI, –¥–∞—à–±–æ—Ä–¥–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏, e-commerce –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é. –ü–æ—Ç—Ä—ñ–±–µ–Ω –Ω–æ–≤–∏–π –ø—Ä–æ—î–∫—Ç —á–∏ –º–æ–¥–µ—Ä–Ω—ñ–∑–∞—Ü—ñ—è —ñ—Å–Ω—É—é—á–æ–≥–æ?';
    }
    
    if (message.includes('iot') || message.includes('–¥–∞—Ç—á–∏–∫') || message.includes('—Å–µ–Ω—Å–æ—Ä')) {
      return 'üì° –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ IoT-–¥–∞—Ç—á–∏–∫–∏ –¥–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏, —Å—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—É–º–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É. –Ø–∫—É –≥–∞–ª—É–∑—å –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª—é–≤–∞—Ç–∏?';
    }
    
    if (message.includes('–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü') || message.includes('–¥–æ–ø–æ–º–æ–≥')) {
      return 'üéØ –ü—Ä–æ–≤–æ–¥–∏–º–æ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –≤–∞—à–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤ —Ç–∞ ROI –ø—Ä–æ–≥–Ω–æ–∑—É. –ö–æ–ª–∏ –∑—Ä—É—á–Ω–æ –∑–≤\'—è–∑–∞—Ç–∏—Å—è?';
    }
    
    return 'ü§î –¶—ñ–∫–∞–≤–æ! –†–æ–∑–∫–∞–∂—ñ—Ç—å –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ –≤–∞—à –±—ñ–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å. –ê–±–æ –æ–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –ø—Ä–æ–¥–∞–∂—ñ–≤, AI-–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞, —á–∞—Ç-–±–æ—Ç–∏, –≤–µ–±-—Ä–æ–∑—Ä–æ–±–∫–∞, IoT —Ä—ñ—à–µ–Ω–Ω—è.';
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate AI thinking time
    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        type: 'bot',
        content: getAIResponse(userMessage.content),
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1000 + Math.random() * 2000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50 group cursor-pointer">
        <Button
          onClick={() => setIsOpen(true)}
          className="h-24 w-24 rounded-full bg-gradient-to-br from-primary via-primary/95 to-primary/85 hover:from-primary/90 hover:to-primary/70 shadow-2xl hover:shadow-3xl transition-all duration-300 group-hover:scale-105 border-4 border-white/20 backdrop-blur-sm"
        >
          <div className="flex flex-col items-center gap-1">
            <MessageCircle className="h-8 w-8 group-hover:scale-110 transition-transform duration-300" />
            <span className="text-xs font-medium">–ß–∞—Ç</span>
          </div>
        </Button>
        <div 
          className="absolute -top-2 -left-8 cursor-pointer"
          onClick={() => setIsOpen(true)}
        >
          <Badge variant="secondary" className="bg-gradient-to-r from-green-500 to-green-600 text-white text-sm px-4 py-2 shadow-lg rounded-full border-2 border-white/30 hover:from-green-600 hover:to-green-700 transition-all duration-300">
            üí¨ –ê—Å–∏—Å—Ç–µ–Ω—Ç
          </Badge>
        </div>
        <div className="absolute -bottom-2 -right-2">
          <div className="w-6 h-6 bg-green-500 rounded-full border-3 border-white shadow-lg"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <Card className="w-80 h-96 shadow-2xl border-primary/20">
        <CardHeader className="pb-3 bg-gradient-to-r from-primary to-primary/80 text-primary-foreground rounded-t-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Bot className="h-5 w-5 animate-pulse" />
              <CardTitle className="text-sm">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ê—Å–∏—Å—Ç–µ–Ω—Ç</CardTitle>
              <Badge variant="secondary" className="text-xs bg-green-500/20 text-green-700 dark:text-green-300">
                ‚óè –û–Ω–ª–∞–π–Ω
              </Badge>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsOpen(false)}
              className="h-6 w-6 p-0 hover:bg-white/20"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </CardHeader>
        
        <CardContent className="p-0 flex flex-col h-80">
          <ScrollArea className="flex-1 p-4">
            <div className="space-y-3">
              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[80%] p-3 rounded-lg text-sm ${
                      message.type === 'user'
                        ? 'bg-primary text-primary-foreground'
                        : 'bg-muted'
                    }`}
                  >
                    <div className="flex items-start gap-2">
                      {message.type === 'bot' && <Bot className="h-4 w-4 mt-0.5 flex-shrink-0" />}
                      {message.type === 'user' && <User className="h-4 w-4 mt-0.5 flex-shrink-0" />}
                      <span>{message.content}</span>
                    </div>
                  </div>
                </div>
              ))}
              
              {isTyping && (
                <div className="flex justify-start">
                  <div className="bg-muted p-3 rounded-lg max-w-[80%]">
                    <div className="flex items-center gap-2">
                      <Bot className="h-4 w-4" />
                      <div className="flex gap-1">
                        <div className="w-2 h-2 bg-muted-foreground/60 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-muted-foreground/60 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-muted-foreground/60 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
            <div ref={messagesEndRef} />
          </ScrollArea>
          
          <div className="p-4 border-t">
            <div className="flex gap-2">
              <Input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è..."
                className="flex-1"
              />
              <Button
                onClick={handleSendMessage}
                disabled={!inputValue.trim() || isTyping}
                size="sm"
                className="px-3"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default AIManagerChatbot;